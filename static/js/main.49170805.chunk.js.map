{"version":3,"sources":["components/tetris.jsx","index.js"],"names":["tetromino","Tetris","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","block","x","y","on","table","Array","boardSize","row","checkMove","bind","assertThisInitialized","moveLeft","moveRight","fall","isValid","rotateLeft","awaitEnter","start","over","pause","unpause","renderUserInterface","window","addEventListener","removeEventListener","clearInterval","fallInterval","event","code","score","fill","rand","Math","floor","random","length","setState","ceil","setInterval","rotateRight","Audio","process","play","col","size","result","drop","full","itr","max","slice","draw","pop","react_default","a","createElement","id","style","width","blockSize","height","className","_this2","map","line","i","ok","j","key","toString","marginLeft","marginTop","React","Component","ReactDOM","render","tetris_Tetris","document","getElementById"],"mappings":"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","file":"static/js/main.49170805.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./tetris.css\";\n\nlet tetromino = [\n    [\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ],\n\n    [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 0, 1]\n    ],\n\n    [   \n        [0, 0, 0],\n        [1, 1, 1],\n        [1, 0, 0]\n    ],\n\n    [\n        [0, 0, 0, 0],\n        [0, 1, 1, 0],\n        [0, 1, 1, 0],\n        [0, 0, 0, 0]\n    ],\n\n    [\n        [0, 0, 0],\n        [0, 1, 1],\n        [1, 1, 0]\n    ],\n\n    [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 1, 0]\n    ],\n\n    [\n        [0, 0, 0],\n        [1, 1, 0],\n        [0, 1, 1]\n    ]\n];\n\nexport default\nclass Tetris extends React.Component\n{\n    constructor(props) \n    {\n        super(props);\n\n        this.state = {\n            block: [[0]],\n            x: 0,\n            y: 0,\n            on: \"init\"\n        };\n\n        this.table = new Array(this.props.boardSize);\n        for (let row = 0; row < this.props.boardSize; ++row)\n            this.table[row] = new Array(this.props.boardSize);\n\n        this.checkMove = this.checkMove.bind(this);\n        this.moveLeft = this.moveLeft.bind(this);\n        this.moveRight = this.moveRight.bind(this);\n        this.fall = this.fall.bind(this);\n        this.isValid = this.isValid.bind(this);\n        this.rotateLeft = this.rotateLeft.bind(this);\n        this.awaitEnter = this.awaitEnter.bind(this);\n        this.start = this.start.bind(this);\n        this.over = this.over.bind(this);\n        this.pause = this.pause.bind(this);\n        this.unpause = this.unpause.bind(this);\n        this.renderUserInterface = this.renderUserInterface.bind(this);\n    }\n\n    componentWillMount()\n    {\n        window.addEventListener(\"keydown\", this.awaitEnter);\n    }\n\n    componentWillUnmount()\n    {\n        window.removeEventListener(\"keydown\", this.awaitEnter);\n        if(this.state.on === \"playing\")\n        {\n            window.removeEventListener(\"keydown\", this.checkMove);\n            clearInterval(this.fallInterval);\n        }\n    }\n\n    awaitEnter(event)\n    {\n        if(event.code === \"Enter\")\n            if(this.state.on === \"init\")\n                this.start();\n            else if(this.state.on === \"playing\")\n                this.pause();\n            else if(this.state.on === \"pause\")\n                this.unpause();\n            else if(this.state.on === \"over\")\n                this.start();\n    }\n\n    start()\n    {\n        this.score = 0;\n\n        for(let row = 0; row < this.props.boardSize; ++row)\n            this.table[row].fill(false);\n\n        let rand = Math.floor(Math.random() * tetromino.length);\n\n        this.setState({\n            x: Math.floor(this.props.boardSize / 2) - Math.ceil(tetromino[rand].length / 2),\n            y: -1,\n            block: tetromino[rand],\n            on: \"playing\"\n        });\n\n        window.addEventListener(\"keydown\", this.checkMove);\n        this.fallInterval = setInterval(this.fall, 500);\n    }\n\n    over()\n    {\n        this.setState({\n            block: [[0]],\n            x: 0,\n            y: 0,\n            on: \"over\"\n        });\n\n        window.removeEventListener(\"keydown\", this.checkMove);\n        clearInterval(this.fallInterval);\n    }\n\n    pause()\n    {\n        this.setState({\n            on: \"pause\"\n        });\n\n        window.removeEventListener(\"keydown\", this.checkMove);\n        clearInterval(this.fallInterval);\n    }\n\n    unpause()\n    {\n        this.setState({\n            on: \"playing\"\n        });\n\n        window.addEventListener(\"keydown\", this.checkMove);\n        this.fallInterval = setInterval(this.fall, 500);\n    }\n\n    checkMove(event)\n    {\n        if(event.code === \"ArrowDown\") \n            this.fall();\n        else if(event.code === \"ArrowLeft\") \n            this.moveLeft();\n        else if(event.code === \"ArrowRight\") \n            this.moveRight();\n        else if(event.code === \"KeyA\") \n            this.rotateLeft();\n        else if(event.code === \"KeyD\") \n            this.rotateRight();\n    }\n\n    moveLeft()\n    {\n        new Audio(process.env.PUBLIC_URL + \"/pop.mp3\").play();\n\n        if(this.isValid(this.state.block, this.state.x - 1, this.state.y))\n            this.setState({ x: this.state.x - 1 });\n    }\n\n    moveRight() \n    {\n        new Audio(process.env.PUBLIC_URL + \"/pop.mp3\").play();\n\n        if(this.isValid(this.state.block, this.state.x + 1, this.state.y))\n            this.setState({ x: this.state.x + 1 });\n    }\n\n    isValid(block, x, y)\n    {\n        for(let row = block.length - 1; row >= 0; --row)\n            for(let col = 0; col < block.length; ++col)\n            {\n                if(block[row][col] && (\n                    row + y >= this.props.boardSize || \n                    row + y < 0 ||\n                    col + x >= this.props.boardSize ||\n                    col + x < 0 ||\n                    this.table[row + y][col + x]\n                ))\n                    return false;\n            }\n        return true;\n    }\n\n    rotateLeft()\n    {\n        new Audio(process.env.PUBLIC_URL + \"/pop.mp3\").play();\n\n        let size = this.state.block.length;\n        let result = new Array(size);\n        for(let row = 0; row < size; ++row)\n            result[row] = new Array(size);\n\n        for(let row = 0; row < size; ++row)\n            for(let col = 0; col < size; ++col)\n                result[col][size - row - 1] = this.state.block[row][col];\n\n        if(this.isValid(result, this.state.x, this.state.y))\n            this.setState({\n                block: result\n            });\n        else if(this.isValid(result, this.state.x - 1, this.state.y))\n            this.setState({\n                x: this.state.x - 1,\n                block: result\n            });\n        else if(this.isValid(result, this.state.x + 1, this.state.y))\n            this.setState({\n                x: this.state.x + 1,\n                block: result\n            });\n    }\n\n    rotateRight()\n    {\n        new Audio(process.env.PUBLIC_URL + \"/pop.mp3\").play();\n\n        let size = this.state.block.length;\n        let result = new Array(size);\n        for(let row = 0; row < size; ++row)\n            result[row] = new Array(size);\n\n        for(let row = 0; row < size; ++row)\n            for(let col = 0; col < size; ++col)\n                result[size - col - 1][row] = this.state.block[row][col];\n        \n        if(this.isValid(result, this.state.x, this.state.y))\n            this.setState({\n                block: result\n            });\n        else if(this.isValid(result, this.state.x - 1, this.state.y))\n            this.setState({\n                x: this.state.x - 1,\n                block: result\n            });\n        else if(this.isValid(result, this.state.x + 1, this.state.y))\n            this.setState({\n                x: this.state.x + 1,\n                block: result\n            });\n    }\n\n    draw()\n    {\n        for(let row = 0; row < this.state.block.length; ++row)\n            for(let col = 0; col < this.state.block.length; ++col)\n                if(this.state.block[row][col])\n                    this.table[row + this.state.y][col + this.state.x] = true;\n    }\n\n    pop()\n    {\n        let drop = new Array(this.table.length).fill(0);\n        let score = 0;\n\n        for(let row = this.table.length - 1; row >= 0; --row)\n        {\n            let full = true;\n            for(let col = 0; col < this.table.length; ++col)\n            {\n                if(!this.table[row][col])\n                {\n                    full = false;\n                    break;\n                }\n            }\n            if(full)\n            {\n                drop[row] = -1;\n                for(let itr = 0; itr < row; ++itr)\n                    ++drop[itr];\n                score = Math.max(Math.ceil(2.5 * score), 100);\n            }\n        }\n        for(let row = this.table.length - 1; row >= 0; --row)\n        {\n            if(drop[row] > 0)\n                this.table[row + drop[row]] = this.table[row].slice(0);\n        }\n        return score;\n    }\n\n    fall() \n    {\n        for(let row = 0; row < this.state.block.length; ++row)\n            for(let col = 0; col < this.state.block.length; ++col)\n            {\n                if(!this.isValid(this.state.block, this.state.x, this.state.y + 1))\n                {\n                    if (this.state.y === -1) \n                    {\n                        this.over();\n                    }\n\n                    this.draw();\n\n                    this.score += this.pop();\n\n                    let rand = Math.floor(Math.random() * tetromino.length);\n\n                    this.setState({\n                        x: Math.floor(this.props.boardSize / 2) - Math.ceil(tetromino[rand].length / 2),\n                        y: -1,\n                        block: tetromino[rand],\n                    });\n\n                    return;\n                }\n            }\n        this.setState({ \n            y: this.state.y + 1 \n        });\n    }\n\n    renderUserInterface()\n    {\n        if(this.state.on === \"init\")\n            return (\n                <div\n                    id = \"tetrisUserInterface\"\n                    style = {{ \n                        width: this.props.boardSize * this.props.blockSize,\n                        height: this.props.boardSize * this.props.blockSize,\n                    }}\n                >\n                    <p className = \"tetrisText\">\n                        Press ENTER to START\n                    </p>\n                </div>\n            );\n        if(this.state.on === \"over\")\n            return (\n                <div\n                    id = \"tetrisUserInterface\" \n                    style = {{ \n                        width: this.props.boardSize * this.props.blockSize,\n                        height: this.props.boardSize * this.props.blockSize,\n                    }}\n                >\n                    <div className = \"tetrisText\">\n                        <p>\n                            GAME OVER\n                        </p>\n                        <p>\n                            Press ENTER to PLAY AGAIN\n                        </p>\n                    </div>\n                    <p className = \"tetrisScore\">\n                        {this.score}\n                    </p>\n                </div>\n            );\n        if(this.state.on === \"pause\")\n            return (\n                <div\n                    id = \"tetrisUserInterface\" \n                    style = {{ \n                        width: this.props.boardSize * this.props.blockSize,\n                        height: this.props.boardSize * this.props.blockSize,\n                    }}\n                >\n                    <p className = \"tetrisText\">\n                        Press ENTER to UNPAUSE\n                    </p>\n                    <p className = \"tetrisScore\">\n                        {this.score}\n                    </p>\n                </div>\n            );\n        if(this.state.on === \"playing\")\n            return (\n                <div\n                    id = \"tetrisUserInterface\"\n                    style = {{ \n                        width: this.props.boardSize * this.props.blockSize,\n                        height: this.props.boardSize * this.props.blockSize,\n                    }}\n                >\n                    <p className = \"tetrisScore\">\n                        {this.score}\n                    </p>\n                </div>\n            );\n    }\n\n    render() \n    {\n        return (\n            <div \n                id = \"tetrisBoard\"\n                style ={{\n                    width: this.props.boardSize * this.props.blockSize,\n                    height: this.props.boardSize * this.props.blockSize,\n                }}\n            >\n                <div\n                    id = \"tetrisBoardGrid\"\n                    style = {{\n                        width: this.props.boardSize * this.props.blockSize,\n                        height: this.props.boardSize * this.props.blockSize,\n                    }}\n                >\n                {\n                    this.table.map((line, i) =>\n                        line.map((ok, j) => {\n                            if(ok)\n                                return (\n                                    <div\n                                        key = {\n                                            i.toString() + j.toString()\n                                        }\n                                        className = \"tetrisBlock\"\n                                        style = {{\n                                            width: this.props.blockSize,\n                                            height: this.props.blockSize,\n                                            marginLeft: j * this.props.blockSize,\n                                            marginTop: i * this.props.blockSize,\n                                        }}\n                                    />\n                                );\n                        })\n                    )\n                }\n                {\n                    this.state.block.map((line, i) =>\n                        line.map((ok, j) => {\n                            if(ok)\n                                return (\n                                    <div\n                                        key = {\n                                            i.toString() + j.toString()\n                                        }\n                                        className = \"tetrisBlock\"\n                                        style = {{\n                                            width: this.props.blockSize,\n                                            height: this.props.blockSize,\n                                            marginLeft: (j+this.state.x) * this.props.blockSize,\n                                            marginTop: (i+this.state.y) * this.props.blockSize,\n                                        }}\n                                    />\n                                );\n                        })\n                    )\n                }\n                </div>\n                {\n                    this.renderUserInterface()\n                }\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Tetris from \"./components/tetris.jsx\";\nimport \"./index.css\";\n\nReactDOM.render(<Tetris boardSize = {20} blockSize = {25}/>, document.getElementById(\"game\"));\n"],"sourceRoot":""}